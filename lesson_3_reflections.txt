Q1  When would you want to use a remote repository rather than keeping all your work local?

  On almost all projects, but the advantages come when working from different locations and PCs.
  When working collaboratively on a project with others in different locations.
  
Q2  Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	First, Git seems to always prefer the fine-grained option over the automatic one. This gives
	the owner full control of git operations. When every action is intentional, it is more likely
	to be more meaningful and more memorable. It will prevent pulling unwanted or unneeded branches
	and commits and allow you to focus on only the parts you want to (if in a big collaborative project, for example).

Q3  Describe the differences between forks, clones, and branches. When would you use one instead of another?

	Forks are like brances of whole repositories on GitHub and would be used when taking some
	one else's work in a new direction, not necessarily with their involvement.

	Clones are exact copies of repositories	made on local PC or between GitHub and local PC, and
	are used to copy a complete set of repository files between two locations.

	Branches are only splits of commits, and are used when files and file edits might benefit from
	going in different directions.

Q4  What is the benefit of having a copy of the last known state of the remote stored locally?

	This helps git to do normal comparisons like log and diff at the right time and place, I
	think it also allows the fast-forward merge? To be honest, it seems essential that it would
	know the point of last sync with remote, so this question appears redundant to me until I
	understand how it works better... things are juuuusstt getting tricky now....

Q5  How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	Collaborating without Git would be either emailing files back and forth or working on Google
	Doc without and IDE. Easier: making mistakes and having conflicts go unresolved and break
	things. Harder would be keeping track, reverting quickly to unbroken code and merging work
	into single controlled and tracked files.

Q6  When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

	When working on experimental features, and other things that may be liable to work less than
	optimally.
	
